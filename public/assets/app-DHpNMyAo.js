class g{constructor(){this.stateManager=new window.StateManager,this.i18n=new window.I18n,this.dataParser=new window.DataParser,this.chartsManager=new window.ChartsManager(this.stateManager,this.i18n,this.dataParser),this.isLoading=!1,this.lastDataUpdate=null,this.cardsData=null,this.activityData=null}async init(){try{if(console.log("Initializing Anki Stats Dashboard..."),typeof window.Chart>"u")throw new Error("Chart.js library not loaded");typeof window.DataTable>"u"&&console.warn("DataTable library not loaded, table functionality may be limited");const t=this.stateManager.getState("theme");console.log("Applying saved theme:",t),this.applyTheme(t);const e=this.stateManager.getState("language");console.log("Setting saved language:",e),this.i18n.setLanguage(e),this.i18n.updateUI(),this.setupEventListeners(),this.setupStateSubscriptions(),this.setLoadingState(!0),await this.loadData(),await this.initializeComponents(),this.applySavedFilters(),this.setLoadingState(!1),this.lastDataUpdate=new Date,this.stateManager.updateUIState({lastDataUpdate:this.lastDataUpdate.toISOString()}),console.log("Application initialized successfully")}catch(t){console.error("Failed to initialize application:",t),this.setLoadingState(!1),this.showError(`Failed to load application: ${t.message}`)}}async loadData(){try{console.log("Loading data...");let t,e;const a=["/anki_stats.csv","./anki_stats.csv","anki_stats.csv"];for(const s of a)try{if(console.log(`Trying to load CSV from: ${s}`),t=await fetch(s),t.ok){e=await t.text(),console.log(`Successfully loaded CSV from: ${s}`);break}}catch(i){console.log(`Failed to load CSV from ${s}:`,i.message)}if(!e)throw new Error("Failed to load CSV data from any location");this.cardsData=this.dataParser.parseCSV(e),console.log(`Loaded ${this.cardsData.length} cards`);try{let s,i;const l=["/activity_log.json","./activity_log.json","activity_log.json"];for(const n of l)try{if(console.log(`Trying to load activity log from: ${n}`),s=await fetch(n),s.ok){i=await s.json(),console.log(`Successfully loaded activity log from: ${n}`);break}}catch(r){console.log(`Failed to load from ${n}:`,r.message)}if(i){const n=i.daily_activity||i;this.activityData=this.dataParser.parseActivityLog(n),console.log(`Loaded activity data for ${Object.keys(this.activityData).length} days`)}else console.warn("Activity log not found in any location, using empty data"),this.activityData={}}catch(s){console.warn("Could not load activity log:",s),this.activityData={}}}catch(t){throw console.error("Error loading data:",t),t}}async initializeComponents(){try{console.log("Initializing charts and components..."),await this.chartsManager.initializeCharts(this.cardsData,this.activityData),this.initializeCardTable(),this.updateFilterOptions(),this.updateSummaryStats()}catch(t){throw console.error("Error initializing components:",t),t}}initializeCardTable(){document.getElementById("cardTable")&&(this.dataTable&&this.dataTable.destroy(),this.initializeDataTable())}initializeDataTable(){const t=this.stateManager.getState("filters"),a=this.dataParser.filterCards(this.cardsData,t).map(i=>[this.escapeHtml(i.finnish||""),this.escapeHtml(i.translation||""),`<span class="level-badge level-${(i.ankiLevel||"").toLowerCase().replace(/\s+/g,"-")}">${this.i18n.t(`levels.${i.ankiLevel}`)||i.ankiLevel}</span>`,this.escapeHtml(i.deckName||""),i.lastReviewDate?this.i18n.formatDate(i.lastReviewDate):"-"]);this.i18n.getCurrentLanguage();const s={data:a,responsive:!0,pageLength:25,lengthMenu:[[10,25,50,100,-1],[10,25,50,100,this.i18n.t("pagination.all")]],language:{search:this.i18n.t("pagination.search"),lengthMenu:this.i18n.t("pagination.lengthMenu"),info:this.i18n.t("pagination.info"),infoEmpty:this.i18n.t("pagination.infoEmpty"),infoFiltered:this.i18n.t("pagination.infoFiltered"),emptyTable:this.i18n.t("pagination.emptyTable"),paginate:{first:this.i18n.t("pagination.first"),previous:this.i18n.t("pagination.previous"),next:this.i18n.t("pagination.next"),last:this.i18n.t("pagination.last")}},order:[[4,"desc"]],columnDefs:[{targets:[2],orderable:!0,render:function(i,l,n){if(l==="sort"){const r=document.createElement("div");return r.innerHTML=i,r.textContent||r.innerText||""}return i}}],drawCallback:()=>{this.updateCardCount()}};this.dataTable=new window.DataTable("#cardTable",s)}updateCardTable(){if(!this.dataTable){this.initializeDataTable();return}const t=this.stateManager.getState("filters"),a=this.dataParser.filterCards(this.cardsData,t).map(s=>[this.escapeHtml(s.finnish||""),this.escapeHtml(s.translation||""),`<span class="level-badge level-${(s.ankiLevel||"").toLowerCase().replace(/\s+/g,"-")}">${this.i18n.t(`levels.${s.ankiLevel}`)||s.ankiLevel}</span>`,this.escapeHtml(s.deckName||""),s.lastReviewDate?this.i18n.formatDate(s.lastReviewDate):"-"]);this.dataTable.clear(),this.dataTable.rows.add(a),this.dataTable.draw()}updateCardCount(){const t=document.getElementById("cardCount");if(t&&this.dataTable){const e=this.dataTable.page.info(),a=this.i18n.formatNumber(e.recordsDisplay)+" "+this.i18n.t("stats.cards");t.textContent=a}}createTableRow(t){const e=document.createElement("tr");return e.className="card-row",e.dataset.noteId=t.noteId,e.addEventListener("click",()=>{this.selectCard(t)}),e.innerHTML=`
      <td class="finnish-cell">${this.escapeHtml(t.finnish)}</td>
      <td class="translation-cell">${this.escapeHtml(t.translation)}</td>
      <td class="level-cell">
        <span class="level-badge level-${t.ankiLevel.toLowerCase().replace(/\s+/g,"-")}">${this.i18n.t(`levels.${t.ankiLevel}`)}</span>
      </td>
      <td class="deck-cell">${this.escapeHtml(t.deckName)}</td>
      <td class="date-cell">${t.lastReviewDate?this.i18n.formatDate(t.lastReviewDate):"-"}</td>
    `,e}sortCards(t,e,a){const s=a==="desc"?-1:1;return[...t].sort((i,l)=>{let n,r;switch(e){case"finnish":n=i.finnish||"",r=l.finnish||"";break;case"translation":n=i.translation||"",r=l.translation||"";break;case"level":n=i.ankiLevel||"",r=l.ankiLevel||"";break;case"deck":n=i.deckName||"",r=l.deckName||"";break;case"lastReview":n=i.lastReviewDate||new Date(0),r=l.lastReviewDate||new Date(0);break;default:return 0}return n<r?-1*s:n>r?1*s:0})}updateTablePagination(t,e){const a=Math.ceil(t/e.pageSize);console.log(`Page ${e.currentPage} of ${a}`)}selectCard(t){this.stateManager.updateUIState({selectedCard:t.noteId}),document.querySelectorAll(".card-row.selected").forEach(a=>{a.classList.remove("selected")});const e=document.querySelector(`[data-note-id="${t.noteId}"]`);e&&e.classList.add("selected"),this.showCardDetails(t)}showCardDetails(t){console.log("Card details:",t)}updateFilterOptions(){const t=document.getElementById("deckFilter");if(t&&this.cardsData){const a=this.dataParser.getUniqueDecks(this.cardsData);this.updateSelectOptions(t,a,"filters.allDecks")}const e=document.getElementById("levelFilter");if(e&&this.cardsData){const a=this.dataParser.getUniqueLevels(this.cardsData);this.updateSelectOptions(e,a,"filters.allLevels",!0)}}updateSelectOptions(t,e,a,s=!1){for(;t.children.length>1;)t.removeChild(t.lastChild);t.firstChild&&(t.firstChild.textContent=this.i18n.t(a)),e.forEach(i=>{const l=document.createElement("option");l.value=i,l.textContent=s?this.i18n.t(`levels.${i}`):i,t.appendChild(l)})}updateSummaryStats(){const t=this.stateManager.getState("filters"),e=this.dataParser.filterCards(this.cardsData,t),a=this.dataParser.getSummaryStats(e);this.updateStatsElement("totalCards",a.totalCards),this.updateStatsElement("studiedToday",a.studiedToday),this.updateStatsElement("averageDaily",a.averageDaily),this.updateStatsElement("newWordsToday",a.newWordsToday),this.updateStatsElement("newWordsThisWeek",a.newWordsThisWeek)}updateStatsElement(t,e){const a=document.getElementById(t);a&&(a.textContent=this.i18n.formatNumber(e))}setupEventListeners(){document.querySelectorAll(".lang-btn").forEach(o=>{o.addEventListener("click",c=>{const d=c.target.dataset.lang;this.changeLanguage(d)})});const t=document.getElementById("themeToggle");t&&t.addEventListener("click",()=>{this.toggleTheme()});const e=document.getElementById("deckFilter");e&&e.addEventListener("change",o=>{this.updateDeckFilter(o.target.value)});const a=document.getElementById("levelFilter");a&&a.addEventListener("change",o=>{this.updateLevelFilter(o.target.value)});const s=document.getElementById("searchFilter");s&&s.addEventListener("input",o=>{this.updateSearchFilter(o.target.value)});const i=document.getElementById("clearFilters");i&&i.addEventListener("click",()=>{this.clearAllFilters()});const l=document.getElementById("timelineZoom");l&&l.addEventListener("change",o=>{this.chartsManager.updateTimelineZoom(o.target.value)});const n=document.getElementById("heatmapYear");n&&n.addEventListener("change",o=>{this.chartsManager.updateHeatmapYear(parseInt(o.target.value))}),document.querySelectorAll(".stat-card.clickable").forEach(o=>{o.addEventListener("click",c=>{const d=c.currentTarget.getAttribute("data-filter");this.toggleStatFilter(d,o)})})}toggleStatFilter(t,e){console.log("Toggling stat filter:",t);const s=this.stateManager.getState("filters").statFilter;s&&s.type===t?(this.stateManager.updateFilters({statFilter:null}),this.updateStatCardVisualState(null)):(this.stateManager.updateFilters({statFilter:{type:t,active:!0}}),this.updateStatCardVisualState(t)),this.updateChartsAndTable()}updateStatCardVisualState(t){document.querySelectorAll(".stat-card.clickable").forEach(a=>{a.getAttribute("data-filter")===t?a.classList.add("active"):a.classList.remove("active")})}updateChartsAndTable(){this.updateSummaryStats(),this.updateCardTable(),this.chartsManager&&this.chartsManager.updateChartsData()}setupStateSubscriptions(){this.stateManager.subscribe("filterChange",()=>{this.updateCardTable(),this.updateSummaryStats()}),this.stateManager.subscribe("languageChange",()=>{this.updateFilterOptions(),this.initializeCardTable()}),this.stateManager.subscribe("themeChange",t=>{this.applyTheme(t.newState.theme)})}applySavedFilters(){const t=this.stateManager.getState("filters"),e=this.stateManager.getState("chartStates"),a=document.getElementById("deckFilter");a&&t.selectedDecks.length===1&&(a.value=t.selectedDecks[0]);const s=document.getElementById("levelFilter");s&&t.selectedLevels.length===1&&(s.value=t.selectedLevels[0]);const i=document.getElementById("searchFilter");i&&t.searchQuery&&(i.value=t.searchQuery);const l=document.getElementById("timelineZoom");l&&(l.value=e.timelineZoom);const n=document.getElementById("heatmapYear");n&&(n.value=e.heatmapYear),this.updateLanguageButtons()}updateLanguageButtons(){const t=this.stateManager.getState("language");console.log("Updating language buttons, current lang:",t),document.querySelectorAll(".lang-btn").forEach(e=>{const a=e.dataset.lang===t;e.classList.toggle("active",a),console.log(`Button ${e.dataset.lang} active:`,a)})}changeLanguage(t){console.log("Changing language to:",t),this.i18n.setLanguage(t),this.stateManager.setLanguage(t),this.i18n.updateUI(),this.updateLanguageButtons(),this.cardsData&&this.activityData&&(this.initializeCardTable(),this.chartsManager.updateChartsLanguage())}toggleTheme(){console.log("Toggling theme");const t=this.stateManager.toggleTheme();console.log("New theme:",t),this.applyTheme(t)}applyTheme(t){document.documentElement.setAttribute("data-theme",t);const e=document.querySelector(".theme-icon");e&&(e.textContent=t==="dark"?"☀️":"🌙")}updateDeckFilter(t){const e=t?[t]:[];this.stateManager.updateFilters({selectedDecks:e})}updateLevelFilter(t){const e=t?[t]:[];this.stateManager.updateFilters({selectedLevels:e})}updateSearchFilter(t){this.stateManager.updateFilters({searchQuery:t})}clearAllFilters(){this.stateManager.clearFilters();const t=document.getElementById("deckFilter"),e=document.getElementById("levelFilter"),a=document.getElementById("searchFilter");t&&(t.value=""),e&&(e.value=""),a&&(a.value=""),this.updateStatCardVisualState(null)}setLoadingState(t){this.isLoading=t,t?document.querySelectorAll(".chart-container").forEach(a=>{if(!a.querySelector(".loading-overlay")){const s=document.createElement("div");s.className="loading-overlay",s.innerHTML='<div class="loading">Loading data...</div>',s.style.cssText="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.8); display: flex; align-items: center; justify-content: center; z-index: 1000;",a.style.position="relative",a.appendChild(s)}}):document.querySelectorAll(".loading-overlay").forEach(a=>a.remove())}showError(t){console.error(t),alert(t)}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}async refresh(){try{this.setLoadingState(!0),await this.loadData(),await this.initializeComponents(),this.setLoadingState(!1),this.lastDataUpdate=new Date,this.stateManager.updateUIState({lastDataUpdate:this.lastDataUpdate.toISOString()}),console.log("Data refreshed successfully")}catch(t){console.error("Failed to refresh data:",t),this.showError("Failed to refresh data. Please try again."),this.setLoadingState(!1)}}getDebugInfo(){var t,e;return{cardsLoaded:((t=this.cardsData)==null?void 0:t.length)||0,activityDays:Object.keys(this.activityData||{}).length,lastDataUpdate:(e=this.lastDataUpdate)==null?void 0:e.toISOString(),chartsInitialized:this.chartsManager.charts.size,currentLanguage:this.i18n.getCurrentLanguage(),currentTheme:this.stateManager.getState("theme"),stateManager:this.stateManager.getDebugInfo()}}}export{g as AnkiStatsApp};
