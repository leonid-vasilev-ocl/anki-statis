class m{constructor(t,a,e){this.stateManager=t,this.i18n=a,this.dataParser=e,this.charts=new Map,this.chartConfigs=new Map,this.stateManager.subscribe("languageChange",()=>this.updateChartsLanguage()),this.stateManager.subscribe("themeChange",()=>this.updateChartsTheme()),this.stateManager.subscribe("filterChange",()=>this.updateChartsData())}async initializeCharts(t,a){try{console.log("Initializing charts with data:",{cardsCount:t==null?void 0:t.length,activityDays:Object.keys(a||{}).length}),this.cardsData=t,this.activityData=a,console.log("Charts using already parsed activity data from dataParser.historyData"),console.log("Creating level distribution chart..."),await this.createLevelDistributionChart(),console.log("Creating deck performance chart..."),await this.createDeckPerformanceChart(),console.log("Creating study timeline chart..."),await this.createStudyTimelineChart(),console.log("Creating activity heatmap..."),await this.createActivityHeatmap(),console.log("All charts initialized successfully")}catch(e){throw console.error("Error initializing charts:",e),e}}async createLevelDistributionChart(){const t=document.getElementById("levelChart");if(!t){console.error("levelChart canvas not found!");return}console.log("Canvas found, getting context...");const a=t.getContext("2d"),e=this.getFilteredData();console.log("Filtered data:",e==null?void 0:e.length,"cards");const o=this.dataParser.getLevelDistribution(e);console.log("Level distribution:",o);const l=Object.keys(o).map(n=>this.i18n.t(`levels.${n}`)),r=Object.values(o),s=this.getLevelColors(),i={type:"pie",data:{labels:l,datasets:[{data:r,backgroundColor:Object.keys(o).map(n=>s[n]||s.default),borderColor:this.getThemeColors().border,borderWidth:2,hoverBorderWidth:3}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{title:{display:!0,text:this.i18n.t("charts.levelDistribution"),color:this.getThemeColors().text,font:{size:16,weight:"bold"}},legend:{position:"bottom",labels:{color:this.getThemeColors().text,padding:20,usePointStyle:!0}},tooltip:{backgroundColor:this.getThemeColors().tooltipBg,titleColor:this.getThemeColors().text,bodyColor:this.getThemeColors().text,borderColor:this.getThemeColors().border,borderWidth:1,callbacks:{label:n=>{const h=n.dataset.data.reduce((g,C)=>g+C,0),c=(n.parsed/h*100).toFixed(1);return`${n.label}: ${n.parsed} (${c}%)`}}}},onClick:(n,h)=>{if(h.length>0){const c=h[0];i.data.labels[c.index];const g=Object.keys(o)[c.index];this.handleLevelChartClick(g)}},animation:{animateRotate:!0,animateScale:!0,duration:1e3}}};this.charts.has("levelChart")&&this.charts.get("levelChart").destroy(),console.log("Creating Chart.js instance..."),console.log("Chart.js available:",typeof Chart<"u"),console.log("Config:",i);const d=new window.Chart(a,i);console.log("Chart created successfully:",d),this.charts.set("levelChart",d),this.chartConfigs.set("levelChart",i)}async createDeckPerformanceChart(){const t=document.getElementById("deckChart");if(!t)return;const a=t.getContext("2d"),e=this.getFilteredData(),o=this.dataParser.getDeckPerformance(e),l=o.map(h=>h.name),r=["New","Learning","Young","Mature","Relearning","Suspended"],s=this.getLevelColors(),i=r.map(h=>({label:this.i18n.t(`levels.${h}`),data:o.map(c=>c.levels[h]||0),backgroundColor:s[h]||s.default,borderColor:this.getThemeColors().border,borderWidth:1})),d={type:"bar",data:{labels:l,datasets:i},options:{responsive:!0,maintainAspectRatio:!1,indexAxis:"y",scales:{x:{stacked:!0,grid:{color:this.getThemeColors().gridLines},ticks:{color:this.getThemeColors().text}},y:{stacked:!0,grid:{color:this.getThemeColors().gridLines},ticks:{color:this.getThemeColors().text,maxTicksLimit:10}}},plugins:{title:{display:!0,text:this.i18n.t("charts.deckPerformance"),color:this.getThemeColors().text,font:{size:16,weight:"bold"}},legend:{position:"top",labels:{color:this.getThemeColors().text,usePointStyle:!0}},tooltip:{backgroundColor:this.getThemeColors().tooltipBg,titleColor:this.getThemeColors().text,bodyColor:this.getThemeColors().text,borderColor:this.getThemeColors().border,borderWidth:1,mode:"index",intersect:!1}},onClick:(h,c)=>{if(c.length>0){const g=c[0],C=l[g.index];this.handleDeckChartClick(C)}},animation:{duration:1e3,easing:"easeInOutQuart"}}};this.charts.has("deckChart")&&this.charts.get("deckChart").destroy();const n=new window.Chart(a,d);this.charts.set("deckChart",n),this.chartConfigs.set("deckChart",d)}async createStudyTimelineChart(){const t=document.getElementById("timelineChart");if(!t)return;const a=t.getContext("2d"),e=this.stateManager.getState("chartStates.timelineZoom"),o=this.i18n.getCurrentLanguage()==="ru"?"ru-RU":"en-US",r={type:"line",data:this.dataParser.getTimelineData(e,o),options:{responsive:!0,maintainAspectRatio:!1,scales:{x:{grid:{color:this.getThemeColors().gridLines},ticks:{color:this.getThemeColors().text,maxTicksLimit:15}},y:{beginAtZero:!0,grid:{color:this.getThemeColors().gridLines},ticks:{color:this.getThemeColors().text}}},plugins:{title:{display:!0,text:this.i18n.t("charts.studyTimeline"),color:this.getThemeColors().text,font:{size:16,weight:"bold"}},legend:{labels:{color:this.getThemeColors().text,usePointStyle:!0}},tooltip:{backgroundColor:this.getThemeColors().tooltipBg,titleColor:this.getThemeColors().text,bodyColor:this.getThemeColors().text,borderColor:this.getThemeColors().border,borderWidth:1,mode:"index",intersect:!1}},interaction:{mode:"index",intersect:!1},animation:{duration:1500,easing:"easeInOutQuart"}}};r.data.datasets.forEach((i,d)=>{const n=["#4CAF50","#2196F3","#FF9800","#9C27B0"];i.borderColor=n[d%n.length],i.backgroundColor=n[d%n.length]+"20",i.label==="Reviews"?i.label=this.i18n.t("timeline.reviews"):i.label==="New Cards"&&(i.label=this.i18n.t("timeline.newCards"))}),this.charts.has("timelineChart")&&this.charts.get("timelineChart").destroy();const s=new window.Chart(a,r);this.charts.set("timelineChart",s),this.chartConfigs.set("timelineChart",r)}async createActivityHeatmap(){const t=document.getElementById("heatmapChart");if(!t){console.error("Heatmap container not found!");return}const a=this.stateManager.getState("chartStates.heatmapYear"),e=this.dataParser.getHeatmapData(a),o=e.filter(r=>r.activity>0);console.log(`Heatmap: ${o.length} active days found for ${a}`),t.innerHTML="";const l=document.createElement("div");l.style.cssText=`
      display: grid !important;
      grid-template-columns: repeat(53, 12px) !important;
      grid-template-rows: repeat(7, 12px) !important;
      gap: 2px !important;
      padding: 10px !important;
      overflow-x: auto !important;
      width: fit-content !important;
      height: fit-content !important;
      max-width: 100% !important;
    `,e.forEach(r=>{const s=document.createElement("div");s.className=`activity-${r.intensity}`;let i="#f0f0f0";r.intensity===1&&(i="rgba(76, 175, 80, 0.3)"),r.intensity===2&&(i="rgba(76, 175, 80, 0.5)"),r.intensity===3&&(i="rgba(76, 175, 80, 0.7)"),r.intensity===4&&(i="rgba(76, 175, 80, 0.9)"),r.intensity===5&&(i="rgba(76, 175, 80, 1)"),s.style.cssText=`
        width: 12px !important;
        height: 12px !important;
        background-color: ${i} !important;
        border-radius: 2px !important;
        cursor: default !important;
        transition: all 0.2s ease !important;
        border: none !important;
        margin: 0 !important;
        padding: 0 !important;
      `,s.title=`${r.dateStr}: ${r.activity} activities`,l.appendChild(s)}),t.appendChild(l)}getFilteredData(){const t=this.stateManager.getState("filters");return this.dataParser.filterCards(this.cardsData,t)}getLevelColors(){return{New:"#F44336",Learning:"#FF9800",Young:"#FFC107",Mature:"#4CAF50",Relearning:"#9C27B0",Suspended:"#757575","Scheduler Buried":"#616161","User Buried":"#424242",default:"#9E9E9E"}}getThemeColors(){const t=this.stateManager.getState("theme")==="dark";return{text:t?"#e0e0e0":"#333333",border:t?"#444444":"#e0e0e0",gridLines:t?"#333333":"#f0f0f0",tooltipBg:t?"#333333":"#ffffff"}}handleLevelChartClick(t){this.stateManager.toggleLevelFilter(t)}handleDeckChartClick(t){this.stateManager.toggleDeckFilter(t)}updateChartsLanguage(){this.cardsData&&this.activityData&&this.initializeCharts(this.cardsData,this.activityData)}updateChartsTheme(){this.charts.forEach((t,a)=>{const e=this.chartConfigs.get(a);e&&(this.updateChartThemeColors(t,e),t.update())})}updateChartThemeColors(t,a){var o,l,r,s;const e=this.getThemeColors();(o=a.options.plugins)!=null&&o.title&&(a.options.plugins.title.color=e.text),(r=(l=a.options.plugins)==null?void 0:l.legend)!=null&&r.labels&&(a.options.plugins.legend.labels.color=e.text),a.options.scales&&Object.values(a.options.scales).forEach(i=>{i.grid&&(i.grid.color=e.gridLines),i.ticks&&(i.ticks.color=e.text)}),(s=a.options.plugins)!=null&&s.tooltip&&(a.options.plugins.tooltip.backgroundColor=e.tooltipBg,a.options.plugins.tooltip.titleColor=e.text,a.options.plugins.tooltip.bodyColor=e.text,a.options.plugins.tooltip.borderColor=e.border),t.options=a.options}updateChartsData(){this.charts.has("levelChart")&&this.updateLevelChart(),this.charts.has("deckChart")&&this.updateDeckChart()}updateLevelChart(){const t=this.charts.get("levelChart"),a=this.getFilteredData(),e=this.dataParser.getLevelDistribution(a);t.data.labels=Object.keys(e).map(o=>this.i18n.t(`levels.${o}`)),t.data.datasets[0].data=Object.values(e),t.update("none")}updateDeckChart(){const t=this.charts.get("deckChart"),a=this.getFilteredData(),e=this.dataParser.getDeckPerformance(a);t.data.labels=e.map(o=>o.name),t.data.datasets.forEach((o,l)=>{const r=["New","Learning","Young","Mature","Relearning","Suspended"][l];o.data=e.map(s=>s.levels[r]||0)}),t.update("none")}updateTimelineZoom(t){this.stateManager.updateChartState({timelineZoom:t}),this.createStudyTimelineChart()}updateHeatmapYear(t){this.stateManager.updateChartState({heatmapYear:t}),this.createActivityHeatmap()}destroyCharts(){this.charts.forEach(t=>t.destroy()),this.charts.clear(),this.chartConfigs.clear()}exportChart(t,a="png"){const e=this.charts.get(t);return e?e.toBase64Image(a):null}getChartSummary(){const t=this.getFilteredData();return this.dataParser.getSummaryStats(t)}}typeof module<"u"&&module.exports&&(module.exports={ChartsManager:m});export{m as ChartsManager};
